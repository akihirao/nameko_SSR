mic.bruvo.dist <- bruvo.dist(nameko.SSR.MLG.subpop.genind,replen = pinfreps)
theTree.nj.bruvo <- mic.bruvo.dist %>%
nj() %>%    # calculate neighbor-joining tree
ladderize() # organize branches by clade
#plot(theTree.nj.bruvo,cex=0.7)
write.tree(theTree.nj.bruvo, file="Phmi.bruvo.nj.non_boot.tree.nwk")
set.seed(999)
no.boot <- 100
theTree.boot.nj.bruvo <- bruvo.boot(nameko.SSR.MLG.subpop.genind, replen = pinfreps, sample = no.boot, tree = "nj", cutoff = 50, quiet = TRUE, showtree=FALSE)
write.tree(theTree.boot.nj.bruvo, file="Phmi.bruvo.nj.boot.tree.nwk")
info <- data.frame(ID=indNames(nameko.SSR.MLG.subpop.genind),Pop=pop(nameko.SSR.MLG.subpop.genind))
#plot tree with using ggtree
#https://4va.github.io/biodatasci/r-ggtree.html
#https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
Phmi.nj.tree.ggtree.boot <- read.tree("Phmi.bruvo.nj.boot.tree.nwk")
p.tree <- ggtree(Phmi.nj.tree.ggtree.boot) %<+% info + geom_tippoint(aes(color=Pop, shape=Pop))
p.tree <- p.tree + scale_shape_manual(values=c(0,1,2,3,4,5,6,7,8,9,10,11,12,16,17,15,18))
p.tree <- p.tree + scale_color_manual(values=MyCol.ggplot)
p.tree <- p.tree + theme_tree2()
p.tree
# Loading packages
library(related) #Pew et al (2015) Mol Ecol Res | https://doi.org/10.1111/1755-0998.12323
# Loading packages
library(related) #Pew et al (2015) Mol Ecol Res | https://doi.org/10.1111/1755-0998.12323
library(ggplot2)
library(adegenet) #handling of genind object
library(poppr) #handling of genclone object
nameko.raw <- read.csv("MLG_Pmicro_123samples.csv", header=T)
nameko.6_digit.genotype.raw = data.frame(nameko.raw[,c(1:4)],
Phmi01 = paste(formatC(nameko.raw$Phmi01A,width=3, flag="0"),formatC(nameko.raw$Phmi01B,width=3, flag="0"),sep=""),
Phmi02 = paste(formatC(nameko.raw$Phmi02A,width=3, flag="0"),formatC(nameko.raw$Phmi02B,width=3, flag="0"),sep=""),
Phmi03 = paste(formatC(nameko.raw$Phmi03A,width=3, flag="0"),formatC(nameko.raw$Phmi03B,width=3, flag="0"),sep=""),
Phmi05 = paste(formatC(nameko.raw$Phmi05A,width=3, flag="0"),formatC(nameko.raw$Phmi05B,width=3, flag="0"),sep=""),
Phmi07 = paste(formatC(nameko.raw$Phmi07A,width=3, flag="0"),formatC(nameko.raw$Phmi07B,width=3, flag="0"),sep=""),
Phmi08 = paste(formatC(nameko.raw$Phmi08A,width=3, flag="0"),formatC(nameko.raw$Phmi08B,width=3, flag="0"),sep=""),
Phmi09 = paste(formatC(nameko.raw$Phmi09A,width=3, flag="0"),formatC(nameko.raw$Phmi09B,width=3, flag="0"),sep=""),
Phmi10 = paste(formatC(nameko.raw$Phmi10A,width=3, flag="0"),formatC(nameko.raw$Phmi10B,width=3, flag="0"),sep=""),
Phmi13 = paste(formatC(nameko.raw$Phmi13A,width=3, flag="0"),formatC(nameko.raw$Phmi13B,width=3, flag="0"),sep=""),
Phmi14 = paste(formatC(nameko.raw$Phmi14A,width=3, flag="0"),formatC(nameko.raw$Phmi14B,width=3, flag="0"),sep=""),
Phmi17 = paste(formatC(nameko.raw$Phmi17A,width=3, flag="0"),formatC(nameko.raw$Phmi17B,width=3, flag="0"),sep=""),
Phmi20 = paste(formatC(nameko.raw$Phmi20A,width=3, flag="0"),formatC(nameko.raw$Phmi20B,width=3, flag="0"),sep=""),
Phmi23 = paste(formatC(nameko.raw$Phmi23A,width=3, flag="0"),formatC(nameko.raw$Phmi23B,width=3, flag="0"),sep=""),
Phmi24 = paste(formatC(nameko.raw$Phmi24A,width=3, flag="0"),formatC(nameko.raw$Phmi24B,width=3, flag="0"),sep="")
)
nameko.6_digit.genotype <- nameko.6_digit.genotype.raw[-122,]
# Convert to genind object
nameko.SSR.genind <- df2genind(nameko.6_digit.genotype[,-c(1:4)],ploidy=2,ncode=3,ind.name=nameko.6_digit.genotype$ID,pop=nameko.6_digit.genotype$Pop)
strata(nameko.SSR.genind) <- data.frame(nameko.6_digit.genotype[,c(2:3)])
# Convert to genclone object
nameko.SSR.genclone <- as.genclone(nameko.SSR.genind)
# Clone correction
nameko.SSR.MLG.genind <- clonecorrect(nameko.SSR.genind)
nameko.genotype.MLG <- genind2df(nameko.SSR.MLG.genind, usepop = FALSE, oneColPerAll = TRUE)
nameko.genotype.MLG <- data.frame(ID=rownames(nameko.genotype.MLG),nameko.genotype.MLG)
MLG.ID.no.wild <- which(nameko.SSR.MLG.genind@strata$Pop=="Wild")
MLG.ID.no.cultivar <- which(nameko.SSR.MLG.genind@strata$Pop=="Cultivar")
MLG.ID.no.cultivar.indoor <- which(nameko.SSR.MLG.genind@strata$Subpop=="Cultivar.indoor")
MLG.ID.no.cultivar.extra <- setdiff(MLG.ID.no.cultivar, MLG.ID.no.cultivar.indoor)
nameko.genotype.MLG.wild <- nameko.genotype.MLG[MLG.ID.no.wild,]
nameko.genotype.MLG.cultivar <- nameko.genotype.MLG[MLG.ID.no.cultivar,]
nameko.genotype.MLG.cultivar.indoor <- nameko.genotype.MLG[MLG.ID.no.cultivar.indoor,]
nameko.genotype.MLG.cultivar.extra <- nameko.genotype.MLG[MLG.ID.no.cultivar.extra,]
MLG.ID.wild <- nameko.genotype.MLG.wild$ID
MLG.ID.cultivar <- nameko.genotype.MLG.cultivar$ID
MLG.ID.cultivar.indoor <- nameko.genotype.MLG.cultivar.indoor$ID
MLG.ID.cultivar.extra <- setdiff(MLG.ID.cultivar, MLG.ID.cultivar.indoor)
# writing out dataset for the pakacates "related"
write.table(nameko.genotype.MLG, "nameko.MLG.txt", quote=F,row.names=F,col.names=F, append=F)
## Load the data file
nameko.Genotype <- readgenotypedata("nameko.MLG.txt")
## Run 'coancestry' function
related.run.output <- coancestry(nameko.Genotype$gdata, dyadml=1, trioml=1, lynchli=1, lynchrd=1, quellergt=1, ritland =1, wang=1)
## The Queller & Goodnight estimator (1989) of relatedness was applied the following analyses
relatedness.out <- data.frame(ind1.id=related.run.output$related$ind1.id, ind2.id=related.run.output$related$ind2.id, relatedness=related.run.output$related$quellergt)
relatedness.out.wild <- subset(relatedness.out,ind1.id %in% MLG.ID.wild & ind2.id %in% MLG.ID.wild)
no.wild.pair <- nrow(relatedness.out.wild)
relatedness.out.wild <- data.frame(relatedness.out.wild, Within=rep("Wild",no.wild.pair))
relatedness.out.cultivar <- subset(relatedness.out,ind1.id %in% MLG.ID.cultivar & ind2.id %in% MLG.ID.cultivar)
no.cultivar.pair <- nrow(relatedness.out.cultivar)
relatedness.out.cultivar <- data.frame(relatedness.out.cultivar, Within=rep("Cultivar",no.cultivar.pair))
relatedness.out.cultivar.indoor <- subset(relatedness.out,ind1.id %in% MLG.ID.cultivar.indoor & ind2.id %in% MLG.ID.cultivar.indoor)
no.cultivar.indoor.pair <- nrow(relatedness.out.cultivar.indoor)
relatedness.out.cultivar.indoor <- data.frame(relatedness.out.cultivar.indoor, Within=rep("Cultivar.indoor",no.cultivar.indoor.pair))
relatedness.out.cultivar.extra <- subset(relatedness.out,ind1.id %in% MLG.ID.cultivar.extra & ind2.id %in% MLG.ID.cultivar.extra)
no.cultivar.extra.pair <- nrow(relatedness.out.cultivar.extra)
relatedness.out.cultivar.extra <- data.frame(relatedness.out.cultivar.extra, Within=rep("Cultivar.extra",no.cultivar.extra.pair))
relatedness.out.within <- rbind(relatedness.out.wild,relatedness.out.cultivar.extra,relatedness.out.cultivar.indoor)
p.boxplot <- ggplot(relatedness.out.within, aes(x=Within,y=relatedness)) + geom_boxplot() + xlab("") + ylab("Relatedness")
p.boxplot
?coancestry
relatedness.out.cultivar.extra
hist(relatedness.out.cultivar.extra$relatedness)
hist(relatedness.out.wild$relatedness)
hist(relatedness.out.cultivar.extra$relatedness)
hist(relatedness.out.cultivar.indoor$relatedness)
hist(relatedness.out.cultivar.indoor$relatedness, breaks=10)
hist(relatedness.out.cultivar.indoor$relatedness, breaks=112)
hist(relatedness.out.cultivar.indoor$relatedness, breaks=20)
hist(relatedness.out.wild$relatedness,breaks=20)
hist(relatedness.out.cultivar.indoor$relatedness, breaks=20)
hist(relatedness.out.cultivar.extra$relatedness, breaks=20)
?diff
?shuffle(
)
subset(relatedness.out.within, Within!="Cultivar.indoor")
head(subset(relatedness.out.within, Within!="Cultivar.indoor"))
relatedness.out.wild.vs.cultivar.extra <- subset(relatedness.out.within, Within!="Cultivar.indoor")
diff(mean(relatedness=shuffle(Within),data = relatedness.out.wild.vs.cultivar.extra))
```
diff(mean(relatedness~shuffle(Within),data = relatedness.out.wild.vs.cultivar.extra))
relatedness.out.wild.vs.cultivar.extra$relatedness
relatedness.out.wild.vs.cultivar.extra$relatedness
diff(mean(relatedness.out.wild.vs.cultivar.extra$relatedness~shuffle(relatedness.out.wild.vs.cultivar.extra$Within),data = relatedness.out.wild.vs.cultivar.extra))
mean(relatedness.out.wild.vs.cultivar.extra$relatedness~shuffle(relatedness.out.wild.vs.cultivar.extra$Within),data = relatedness.out.wild.vs.cultivar.extra)
relatedness.out.wild.vs.cultivar.extra$relatedness~shuffle(relatedness.out.wild.vs.cultivar.extra$Within),data = relatedness.out.wild.vs.cultivar.extra
install.packages("mosaic")
?tapply
relatedness.out.wild.vs.cultivar.extra$Within
tapply(relatedness.out.wild.vs.cultivar.extra$relatedness, Wild, mean)
tapply(relatedness.out.wild.vs.cultivar.extra$relatedness, within, mean)
tapply(relatedness.out.wild.vs.cultivar.extra$relatedness, Within, mean)
tapply(relatedness.out.wild.vs.cultivar.extra$relatedness, relatedness.out.wild.vs.cultivar.extra$Within, mean)
tapply(relatedness.out$relatedness, relatedness.out$Within, mean)
tapply(relatedness.out.within$relatedness, relatedness.out.within$Within, mean)
diff(tapply(relatedness.out.within$relatedness, relatedness.out.within$Within, mean))
relatedness.out.within <- rbind(relatedness.out.wild,relatedness.out.cultivar.extra,relatedness.out.cultivar.indoor)
relatedness.out.within.wild.vs.cultivar.extra <- rbind(relatedness.out.wild,relatedness.out.cultivar.extra)
relatedness.out.within.wild.vs.cultivar.indoor <- rbind(relatedness.out.wild,relatedness.out.cultivar.indoor)
relatedness.out.within.cultivar.extra.vs.cultivar.indoor <- rbind(relatedness.out.cultivar.extra,relatedness.out.cultivar.indoor)
diff.obs.wild.vs.cultivar.extra <- diff(tapply(relatedness.out.wild.vs.cultivar.extra$relatedness, relatedness.out.wild.vs.cultivar.extra$relatedness$Within.mean))
diff.obs.wild.vs.cultivar.extra <- diff(tapply(relatedness.out.wild.vs.cultivar.extra$relatedness, relatedness.out.wild.vs.cultivar.extra$relatedness$Within,mean))
tapply(relatedness.out.wild.vs.cultivar.extra$relatedness, relatedness.out.wild.vs.cultivar.extra$relatedness$Within,mean)
diff.obs.wild.vs.cultivar.extra <- diff(tapply(relatedness.out.wild.vs.cultivar.extra$relatedness, relatedness.out.wild.vs.cultivar.extra$Within,mean))
diff.obs.wild.vs.cultivar.extra
relatedness.out.within <- rbind(relatedness.out.wild,relatedness.out.cultivar.extra,relatedness.out.cultivar.indoor)
relatedness.out.within.wild.vs.cultivar.extra <- rbind(relatedness.out.wild,relatedness.out.cultivar.extra)
relatedness.out.within.wild.vs.cultivar.extr
relatedness.out.within.wild.vs.cultivar.extra
diff.obs.wild.vs.cultivar.extra <- diff(tapply(relatedness.out.wild.vs.cultivar.extra$relatedness, relatedness.out.wild.vs.cultivar.extra$Within,mean))
diff.obs.wild.vs.cultivar.extra
relatedness.out.wild.vs.cultivar.extra <- data.frame()
relatedness.out.within <- rbind(relatedness.out.wild,relatedness.out.cultivar.extra,relatedness.out.cultivar.indoor)
relatedness.out.within
tapply(relatedness.out.within$relatedness,relatedness.out.within$Within,mean)
relatedness.out.within.wild.vs.cultivar.extra <- rbind(relatedness.out.wild,relatedness.out.cultivar.extra)
tapply(relatedness.out.within.wild.vs.cultivar.extra$relatedness,relatedness.out.within.wild.vs.cultivar.extra$Within,mean)
diff(tapply(relatedness.out.wild.vs.cultivar.extra$relatedness, relatedness.out.wild.vs.cultivar.extra$Within,mean))
tapply(relatedness.out.wild.vs.cultivar.extra$relatedness, relatedness.out.wild.vs.cultivar.extra$Within,mean)
tapply(relatedness.out.wild., relatedness.out.wild.vs.cultivar.extra$Within,mean)
diff(tapply(relatedness.out.within.wild.vs.cultivar.extra$relatedness,relatedness.out.within.wild.vs.cultivar.extra$Within,mean))
diff.obs.wild.vs.cultivar.extra <- diff(tapply(relatedness.out.within.wild.vs.cultivar.extra$relatedness,relatedness.out.within.wild.vs.cultivar.extra$Within,mean))
diff.obs.wild.vs.cultivar.extra
permutation.test <- function(treatment, df, n){
distribution=c()
result=0
for(i in 1:n){
distribution[i]=diff(by(df, sample(treatment, length(treatment), FALSE), mean))
}
result=sum(abs(distribution) >= abs(original))/(n)
return(list(result, distribution))
}
permutation.test(relatedness.out.within.wild.vs.cultivar.extra$Within, )
permutation.test <- function(treatment, outcome, n){
distribution=c()
result=0
for(i in 1:n){
distribution[i]=diff(by(outcome, sample(treatment, length(treatment), FALSE), mean))
}
result=sum(abs(distribution) >= abs(original))/(n)
return(list(result, distribution))
}
permutation.test(relatedness.out.within.wild.vs.cultivar.extra$Within, relatedness.out.within.wild.vs.cultivar.extra$relatedness, 10)
permutation.test <- function(treatment, outcome, n){
distribution=c()
result=0
for(i in 1:n){
distribution[i]=diff(by(outcome, sample(treatment, length(treatment), FALSE), mean))
}
result=sum(abs(distribution) >= abs(original))/(n)
return(list(result, distribution))
}
original <- diff(tapply(relatedness.out.within.wild.vs.cultivar.extra$relatedness,relatedness.out.within.wild.vs.cultivar.extra$Within,mean))
permutation.test(relatedness.out.within.wild.vs.cultivar.extra$Within, relatedness.out.within.wild.vs.cultivar.extra$relatedness, 10)
permutation.test <- function(treatment, outcome, n){
distribution=c()
for(i in 1:n){
distribution[i]=diff(by(outcome, sample(treatment, length(treatment), FALSE), mean))
}
return(list(distribution))
}
permutation.test(relatedness.out.within.wild.vs.cultivar.extra$Within, relatedness.out.within.wild.vs.cultivar.extra$relatedness, 10)
permutation.test <- function(treatment, outcome, n){
distribution=c()
for(i in 1:n){
distribution[i]=diff(by(outcome, sample(treatment, length(treatment), FALSE), mean))
}
return(list(distribution))
}
hist(permutation.test(relatedness.out.within.wild.vs.cultivar.extra$Within, relatedness.out.within.wild.vs.cultivar.extra$relatedness, 100))
permutation.test(relatedness.out.within.wild.vs.cultivar.extra$Within, relatedness.out.within.wild.vs.cultivar.extra$relatedness, 100)
permutation.test <- function(treatment, outcome, n){
distribution=c()
for(i in 1:n){
distribution[i]=diff(by(outcome, sample(treatment, length(treatment), FALSE), mean))
}
return(distribution)
}
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
diff(by(relatedness.out.within.wild.vs.cultivar.extra$relatedness, sample(relatedness.out.within.wild.vs.cultivar.extra$Within, length(relatedness.out.within.wild.vs.cultivar.extra$Within), FALSE), mean))
no.permutation <- 1000
permutation.test <- function(treatment, outcome, n){
distribution=c()
for(i in 1:n){
distribution[i]=diff(by(outcome, sample(treatment, length(treatment), FALSE), mean))
}
return(distribution)
}
# wild vs cultivar.extra
diff.obs.wild.vs.cultivar.extra <- diff(tapply(relatedness.out.within.wild.vs.cultivar.extra$relatedness,relatedness.out.within.wild.vs.cultivar.extra$Within,mean))
wild.vs.cultivar.extra.permu <- permutation.test(relatedness.out.within.wild.vs.cultivar.extra$Within, relatedness.out.within.wild.vs.cultivar.extra$relatedness, no.permutation)
wild.vs.cultivar.extra.permu
hist(wild.vs.cultivar.extra.permu)
permutation.test <- function(treatment, outcome, n){
distribution=c()
obs <- diff(tapply(outcome,treatment,mean))
for(i in 1:n){
distribution[i]=diff(by(outcome, sample(treatment, length(treatment), FALSE), mean))
}
result=sum(abs(distribution) >= abs(obs))/(n)
return(list(result, distribution))
}
wild.vs.cultivar.extra.permu <- permutation.test(relatedness.out.within.wild.vs.cultivar.extra$Within, relatedness.out.within.wild.vs.cultivar.extra$relatedness, no.permutation)
wild.vs.cultivar.extra.permu
# wild vs cultivar.extra
wild.vs.cultivar.extra.permu.out <- permutation.test(relatedness.out.within.wild.vs.cultivar.extra$Within, relatedness.out.within.wild.vs.cultivar.extra$relatedness, no.permutation)
# wild vs cultivar.indoor
wild.vs.cultivar.indoor.permu.out <- permutation.test(relatedness.out.within.wild.vs.cultivar.indoor$Within, relatedness.out.within.wild.vs.cultivar.indoor$relatedness, no.permutation)
# cultivar.extra vs cultivar.indoor
cultivar.extra.vs.cultivar.indoor.permu.out <- permutation.test(relatedness.out.within.cultivar.extra.vs.cultivar.indoor$Within, relatedness.out.within.cultivar.extra.vs.cultivar.indoor$relatedness, no.permutation)
print(wild.vs.cultivar.extra.permu.out[[1]])
print("wild.vs.cultivar.extra")
cat("wild.vs.cultivar.extra")
cat("P value: wild vs cultivar.extra")
print(wild.vs.cultivar.extra.permu.out[[1]])
cat("P value: wild vs cultivar.indoor")
print(wild.vs.cultivar.indoor.permu.out[[1]])
cat("P value: cultivar.extra vs cultivar.indoor")
print(cultivar.extra.vs.cultivar.indoor.permu.out[[1]])
wild.vs.cultivar.indoor.permu.out[[2]])
wild.vs.cultivar.indoor.permu.out[[1]])
wild.vs.cultivar.indoor.permu.out[[1]])
print(wild.vs.cultivar.indoor.permu.out[[1]])
print(wild.vs.cultivar.indoor.permu.out[[2]])
hist(wild.vs.cultivar.indoor.permu.out[[2]])
permutation.test <- function(treatment, outcome, n){
distribution=c()
obs <- diff(tapply(outcome,treatment,mean))
for(i in 1:n){
distribution[i]=diff(by(outcome, sample(treatment, length(treatment), FALSE), mean))
}
result=sum(abs(distribution) >= abs(obs))/(n)
return(list(obs, result, distribution))
}
# wild vs cultivar.extra
wild.vs.cultivar.extra.permu.out <- permutation.test(relatedness.out.within.wild.vs.cultivar.extra$Within, relatedness.out.within.wild.vs.cultivar.extra$relatedness, no.permutation)
# wild vs cultivar.indoor
wild.vs.cultivar.indoor.permu.out <- permutation.test(relatedness.out.within.wild.vs.cultivar.indoor$Within, relatedness.out.within.wild.vs.cultivar.indoor$relatedness, no.permutation)
# cultivar.extra vs cultivar.indoor
cultivar.extra.vs.cultivar.indoor.permu.out <- permutation.test(relatedness.out.within.cultivar.extra.vs.cultivar.indoor$Within, relatedness.out.within.cultivar.extra.vs.cultivar.indoor$relatedness, no.permutation)
# print out P value
cat("P value: wild vs cultivar.extra")
print(wild.vs.cultivar.extra.permu.out[[2]])
cat("P value: wild vs cultivar.indoor")
print(wild.vs.cultivar.indoor.permu.out[[2]])
cat("P value: cultivar.extra vs cultivar.indoor")
print(cultivar.extra.vs.cultivar.indoor.permu.out[[2]])
wild.vs.cultivar.extra.permu.out[[1]]
wild.vs.cultivar.indoor.permu.out[[1]]
wild.vs.cultivar.indoor.permu.out[[1]]
cultivar.extra.vs.cultivar.indoor.permu.out[[1]]
by(outcome, sample(treatment, length(b), FALSE), mean)
printf(wild.vs.cultivar.indoor.permu.out[[2]])
# print out P value
cat("P value: wild vs cultivar.extra")
print(round(wild.vs.cultivar.extra.permu.out[[2]]),digits=4)
cat("P value: wild vs cultivar.indoor")
print(round(wild.vs.cultivar.indoor.permu.out[[2]]),digits=4)
cat("P value: cultivar.extra vs cultivar.indoor")
print(round(cultivar.extra.vs.cultivar.indoor.permu.out[[2]]),digits=4)
cat("P value: wild vs cultivar.extra\n")
cat("P value: wild vs cultivar.extra\n")
print(round(wild.vs.cultivar.extra.permu.out[[2]]),digits=4)
cat("P value: wild vs cultivar.indoor\n")
print(round(wild.vs.cultivar.indoor.permu.out[[2]]),digits=4)
cat("P value: cultivar.extra vs cultivar.indoor\n")
print(round(cultivar.extra.vs.cultivar.indoor.permu.out[[2]]),digits=4)
cat("P value: wild vs cultivar.extra\n")
print(format(wild.vs.cultivar.extra.permu.out[[2]]),digits=4)
cat("P value: wild vs cultivar.indoor\n")
print(format(wild.vs.cultivar.indoor.permu.out[[2]]),digits=4)
cat("P value: cultivar.extra vs cultivar.indoor\n")
print(format(cultivar.extra.vs.cultivar.indoor.permu.out[[2]]),digits=4)
cat("P value: wild vs cultivar.extra\n")
print(format(wild.vs.cultivar.extra.permu.out[[2]]),digits=5)
cat("P value: wild vs cultivar.indoor\n")
print(format(wild.vs.cultivar.indoor.permu.out[[2]]),digits=5)
cat("P value: cultivar.extra vs cultivar.indoor\n")
print(format(cultivar.extra.vs.cultivar.indoor.permu.out[[2]]),digits=5)
?sample
# Loading packages
library(related) #Pew et al (2015) Mol Ecol Res | https://doi.org/10.1111/1755-0998.12323
library(ggplot2)
library(adegenet) #handling of genind object
library(poppr) #handling of genclone object
nameko.raw <- read.csv("MLG_Pmicro_123samples.csv", header=T)
# Convert to 6 digits format for each of the 14 loci
nameko.6_digit.genotype.raw = data.frame(nameko.raw[,c(1:4)],
Phmi01 = paste(formatC(nameko.raw$Phmi01A,width=3, flag="0"),formatC(nameko.raw$Phmi01B,width=3, flag="0"),sep=""),
Phmi02 = paste(formatC(nameko.raw$Phmi02A,width=3, flag="0"),formatC(nameko.raw$Phmi02B,width=3, flag="0"),sep=""),
Phmi03 = paste(formatC(nameko.raw$Phmi03A,width=3, flag="0"),formatC(nameko.raw$Phmi03B,width=3, flag="0"),sep=""),
Phmi05 = paste(formatC(nameko.raw$Phmi05A,width=3, flag="0"),formatC(nameko.raw$Phmi05B,width=3, flag="0"),sep=""),
Phmi07 = paste(formatC(nameko.raw$Phmi07A,width=3, flag="0"),formatC(nameko.raw$Phmi07B,width=3, flag="0"),sep=""),
Phmi08 = paste(formatC(nameko.raw$Phmi08A,width=3, flag="0"),formatC(nameko.raw$Phmi08B,width=3, flag="0"),sep=""),
Phmi09 = paste(formatC(nameko.raw$Phmi09A,width=3, flag="0"),formatC(nameko.raw$Phmi09B,width=3, flag="0"),sep=""),
Phmi10 = paste(formatC(nameko.raw$Phmi10A,width=3, flag="0"),formatC(nameko.raw$Phmi10B,width=3, flag="0"),sep=""),
Phmi13 = paste(formatC(nameko.raw$Phmi13A,width=3, flag="0"),formatC(nameko.raw$Phmi13B,width=3, flag="0"),sep=""),
Phmi14 = paste(formatC(nameko.raw$Phmi14A,width=3, flag="0"),formatC(nameko.raw$Phmi14B,width=3, flag="0"),sep=""),
Phmi17 = paste(formatC(nameko.raw$Phmi17A,width=3, flag="0"),formatC(nameko.raw$Phmi17B,width=3, flag="0"),sep=""),
Phmi20 = paste(formatC(nameko.raw$Phmi20A,width=3, flag="0"),formatC(nameko.raw$Phmi20B,width=3, flag="0"),sep=""),
Phmi23 = paste(formatC(nameko.raw$Phmi23A,width=3, flag="0"),formatC(nameko.raw$Phmi23B,width=3, flag="0"),sep=""),
Phmi24 = paste(formatC(nameko.raw$Phmi24A,width=3, flag="0"),formatC(nameko.raw$Phmi24B,width=3, flag="0"),sep="")
)
# Filter out No.122 due to "NA" alleles
nameko.6_digit.genotype <- nameko.6_digit.genotype.raw[-122,]
# Convert to genind object
nameko.SSR.genind <- df2genind(nameko.6_digit.genotype[,-c(1:4)],ploidy=2,ncode=3,ind.name=nameko.6_digit.genotype$ID,pop=nameko.6_digit.genotype$Pop)
strata(nameko.SSR.genind) <- data.frame(nameko.6_digit.genotype[,c(2:3)])
# Convert to genclone object
nameko.SSR.genclone <- as.genclone(nameko.SSR.genind)
# Clone correction
nameko.SSR.MLG.genind <- clonecorrect(nameko.SSR.genind)
nameko.genotype.MLG <- genind2df(nameko.SSR.MLG.genind, usepop = FALSE, oneColPerAll = TRUE)
nameko.genotype.MLG <- data.frame(ID=rownames(nameko.genotype.MLG),nameko.genotype.MLG)
MLG.ID.No.wild <- which(nameko.SSR.MLG.genind@strata$Pop=="Wild")
MLG.ID.No.cultivar <- which(nameko.SSR.MLG.genind@strata$Pop=="Cultivar")
MLG.ID.No.cultivar.indoor <- which(nameko.SSR.MLG.genind@strata$Subpop=="Cultivar.indoor")
MLG.ID.No.cultivar.extra <- setdiff(MLG.ID.No.cultivar, MLG.ID.No.cultivar.indoor)
nameko.genotype.MLG.wild <- nameko.genotype.MLG[MLG.ID.No.wild,]
nameko.genotype.MLG.cultivar <- nameko.genotype.MLG[MLG.ID.No.cultivar,]
nameko.genotype.MLG.cultivar.indoor <- nameko.genotype.MLG[MLG.ID.No.cultivar.indoor,]
nameko.genotype.MLG.cultivar.extra <- nameko.genotype.MLG[MLG.ID.No.cultivar.extra,]
MLG.ID.wild <- nameko.genotype.MLG.wild$ID
MLG.ID.cultivar <- nameko.genotype.MLG.cultivar$ID
MLG.ID.cultivar.indoor <- nameko.genotype.MLG.cultivar.indoor$ID
MLG.ID.cultivar.extra <- setdiff(MLG.ID.cultivar, MLG.ID.cultivar.indoor)
# write out text file to apply the pakacates "related"
write.table(nameko.genotype.MLG, "nameko.MLG.txt", quote=F,row.names=F,col.names=F, append=F)
## Load the data file from the above text file.
nameko.Genotype <- readgenotypedata("nameko.MLG.txt")
## Run coancestry function in the packages "related"
related.run.output <- coancestry(nameko.Genotype$gdata, dyadml=1, trioml=1, lynchli=1, lynchrd=1, quellergt=1, ritland =1, wang=1)
## The Queller & Goodnight estimator (1989) of relatedness was applied to the following analyses
relatedness.out <- data.frame(ind1.id=related.run.output$related$ind1.id, ind2.id=related.run.output$related$ind2.id, relatedness=related.run.output$related$quellergt)
relatedness.out.wild <- subset(relatedness.out,ind1.id %in% MLG.ID.wild & ind2.id %in% MLG.ID.wild)
no.wild.pair <- nrow(relatedness.out.wild)
relatedness.out.wild <- data.frame(relatedness.out.wild, Within=rep("Wild",no.wild.pair))
relatedness.out.cultivar <- subset(relatedness.out,ind1.id %in% MLG.ID.cultivar & ind2.id %in% MLG.ID.cultivar)
no.cultivar.pair <- nrow(relatedness.out.cultivar)
relatedness.out.cultivar <- data.frame(relatedness.out.cultivar, Within=rep("Cultivar",no.cultivar.pair))
relatedness.out.cultivar.indoor <- subset(relatedness.out,ind1.id %in% MLG.ID.cultivar.indoor & ind2.id %in% MLG.ID.cultivar.indoor)
no.cultivar.indoor.pair <- nrow(relatedness.out.cultivar.indoor)
relatedness.out.cultivar.indoor <- data.frame(relatedness.out.cultivar.indoor, Within=rep("Cultivar.indoor",no.cultivar.indoor.pair))
relatedness.out.cultivar.extra <- subset(relatedness.out,ind1.id %in% MLG.ID.cultivar.extra & ind2.id %in% MLG.ID.cultivar.extra)
no.cultivar.extra.pair <- nrow(relatedness.out.cultivar.extra)
relatedness.out.cultivar.extra <- data.frame(relatedness.out.cultivar.extra, Within=rep("Cultivar.extra",no.cultivar.extra.pair))
relatedness.out.within <- rbind(relatedness.out.wild,relatedness.out.cultivar.extra,relatedness.out.cultivar.indoor)
relatedness.out.within.wild.vs.cultivar.extra <- rbind(relatedness.out.wild,relatedness.out.cultivar.extra)
relatedness.out.within.wild.vs.cultivar.indoor <- rbind(relatedness.out.wild,relatedness.out.cultivar.indoor)
relatedness.out.within.cultivar.extra.vs.cultivar.indoor <- rbind(relatedness.out.cultivar.extra,relatedness.out.cultivar.indoor)
p.boxplot <- ggplot(relatedness.out.within, aes(x=Within,y=relatedness)) + geom_boxplot() + xlab("") + ylab("Relatedness")
p.boxplot
## permutation test
no.permutation <- 1000
permutation.test <- function(treatment, outcome, n){
distribution=c()
obs <- diff(tapply(outcome,treatment,mean))
for(i in 1:n){
distribution[i]=diff(by(outcome, sample(treatment, length(treatment), FALSE), mean))
}
result=sum(abs(distribution) >= abs(obs))/(n)
return(list(obs, result, distribution))
}
# wild vs cultivar.extra
wild.vs.cultivar.extra.permu.out <- permutation.test(v$Within, relatedness.out.within.wild.vs.cultivar.extra$relatedness, no.permutation)
# Loading packages
library(related) #Pew et al (2015) Mol Ecol Res | https://doi.org/10.1111/1755-0998.12323
library(ggplot2)
library(adegenet) #handling of genind object
library(poppr) #handling of genclone object
nameko.raw <- read.csv("MLG_Pmicro_123samples.csv", header=T)
# Convert to 6 digits format for each of the 14 loci
nameko.6_digit.genotype.raw = data.frame(nameko.raw[,c(1:4)],
Phmi01 = paste(formatC(nameko.raw$Phmi01A,width=3, flag="0"),formatC(nameko.raw$Phmi01B,width=3, flag="0"),sep=""),
Phmi02 = paste(formatC(nameko.raw$Phmi02A,width=3, flag="0"),formatC(nameko.raw$Phmi02B,width=3, flag="0"),sep=""),
Phmi03 = paste(formatC(nameko.raw$Phmi03A,width=3, flag="0"),formatC(nameko.raw$Phmi03B,width=3, flag="0"),sep=""),
Phmi05 = paste(formatC(nameko.raw$Phmi05A,width=3, flag="0"),formatC(nameko.raw$Phmi05B,width=3, flag="0"),sep=""),
Phmi07 = paste(formatC(nameko.raw$Phmi07A,width=3, flag="0"),formatC(nameko.raw$Phmi07B,width=3, flag="0"),sep=""),
Phmi08 = paste(formatC(nameko.raw$Phmi08A,width=3, flag="0"),formatC(nameko.raw$Phmi08B,width=3, flag="0"),sep=""),
Phmi09 = paste(formatC(nameko.raw$Phmi09A,width=3, flag="0"),formatC(nameko.raw$Phmi09B,width=3, flag="0"),sep=""),
Phmi10 = paste(formatC(nameko.raw$Phmi10A,width=3, flag="0"),formatC(nameko.raw$Phmi10B,width=3, flag="0"),sep=""),
Phmi13 = paste(formatC(nameko.raw$Phmi13A,width=3, flag="0"),formatC(nameko.raw$Phmi13B,width=3, flag="0"),sep=""),
Phmi14 = paste(formatC(nameko.raw$Phmi14A,width=3, flag="0"),formatC(nameko.raw$Phmi14B,width=3, flag="0"),sep=""),
Phmi17 = paste(formatC(nameko.raw$Phmi17A,width=3, flag="0"),formatC(nameko.raw$Phmi17B,width=3, flag="0"),sep=""),
Phmi20 = paste(formatC(nameko.raw$Phmi20A,width=3, flag="0"),formatC(nameko.raw$Phmi20B,width=3, flag="0"),sep=""),
Phmi23 = paste(formatC(nameko.raw$Phmi23A,width=3, flag="0"),formatC(nameko.raw$Phmi23B,width=3, flag="0"),sep=""),
Phmi24 = paste(formatC(nameko.raw$Phmi24A,width=3, flag="0"),formatC(nameko.raw$Phmi24B,width=3, flag="0"),sep="")
)
# Filter out No.122 due to "NA" alleles
nameko.6_digit.genotype <- nameko.6_digit.genotype.raw[-122,]
# Convert to genind object
nameko.SSR.genind <- df2genind(nameko.6_digit.genotype[,-c(1:4)],ploidy=2,ncode=3,ind.name=nameko.6_digit.genotype$ID,pop=nameko.6_digit.genotype$Pop)
strata(nameko.SSR.genind) <- data.frame(nameko.6_digit.genotype[,c(2:3)])
# Convert to genclone object
nameko.SSR.genclone <- as.genclone(nameko.SSR.genind)
# Clone correction
nameko.SSR.MLG.genind <- clonecorrect(nameko.SSR.genind)
nameko.genotype.MLG <- genind2df(nameko.SSR.MLG.genind, usepop = FALSE, oneColPerAll = TRUE)
nameko.genotype.MLG <- data.frame(ID=rownames(nameko.genotype.MLG),nameko.genotype.MLG)
MLG.ID.No.wild <- which(nameko.SSR.MLG.genind@strata$Pop=="Wild")
MLG.ID.No.cultivar <- which(nameko.SSR.MLG.genind@strata$Pop=="Cultivar")
MLG.ID.No.cultivar.indoor <- which(nameko.SSR.MLG.genind@strata$Subpop=="Cultivar.indoor")
MLG.ID.No.cultivar.extra <- setdiff(MLG.ID.No.cultivar, MLG.ID.No.cultivar.indoor)
nameko.genotype.MLG.wild <- nameko.genotype.MLG[MLG.ID.No.wild,]
nameko.genotype.MLG.cultivar <- nameko.genotype.MLG[MLG.ID.No.cultivar,]
nameko.genotype.MLG.cultivar.indoor <- nameko.genotype.MLG[MLG.ID.No.cultivar.indoor,]
nameko.genotype.MLG.cultivar.extra <- nameko.genotype.MLG[MLG.ID.No.cultivar.extra,]
MLG.ID.wild <- nameko.genotype.MLG.wild$ID
MLG.ID.cultivar <- nameko.genotype.MLG.cultivar$ID
MLG.ID.cultivar.indoor <- nameko.genotype.MLG.cultivar.indoor$ID
MLG.ID.cultivar.extra <- setdiff(MLG.ID.cultivar, MLG.ID.cultivar.indoor)
# write out text file to apply the pakacates "related"
write.table(nameko.genotype.MLG, "nameko.MLG.txt", quote=F,row.names=F,col.names=F, append=F)
## Load the data file from the above text file.
nameko.Genotype <- readgenotypedata("nameko.MLG.txt")
## Run coancestry function in the packages "related"
related.run.output <- coancestry(nameko.Genotype$gdata, dyadml=1, trioml=1, lynchli=1, lynchrd=1, quellergt=1, ritland =1, wang=1)
## The Queller & Goodnight estimator (1989) of relatedness was applied to the following analyses
relatedness.out <- data.frame(ind1.id=related.run.output$related$ind1.id, ind2.id=related.run.output$related$ind2.id, relatedness=related.run.output$related$quellergt)
relatedness.out.wild <- subset(relatedness.out,ind1.id %in% MLG.ID.wild & ind2.id %in% MLG.ID.wild)
no.wild.pair <- nrow(relatedness.out.wild)
relatedness.out.wild <- data.frame(relatedness.out.wild, Within=rep("Wild",no.wild.pair))
relatedness.out.cultivar <- subset(relatedness.out,ind1.id %in% MLG.ID.cultivar & ind2.id %in% MLG.ID.cultivar)
no.cultivar.pair <- nrow(relatedness.out.cultivar)
relatedness.out.cultivar <- data.frame(relatedness.out.cultivar, Within=rep("Cultivar",no.cultivar.pair))
relatedness.out.cultivar.indoor <- subset(relatedness.out,ind1.id %in% MLG.ID.cultivar.indoor & ind2.id %in% MLG.ID.cultivar.indoor)
no.cultivar.indoor.pair <- nrow(relatedness.out.cultivar.indoor)
relatedness.out.cultivar.indoor <- data.frame(relatedness.out.cultivar.indoor, Within=rep("Cultivar.indoor",no.cultivar.indoor.pair))
relatedness.out.cultivar.extra <- subset(relatedness.out,ind1.id %in% MLG.ID.cultivar.extra & ind2.id %in% MLG.ID.cultivar.extra)
no.cultivar.extra.pair <- nrow(relatedness.out.cultivar.extra)
relatedness.out.cultivar.extra <- data.frame(relatedness.out.cultivar.extra, Within=rep("Cultivar.extra",no.cultivar.extra.pair))
relatedness.out.within <- rbind(relatedness.out.wild,relatedness.out.cultivar.extra,relatedness.out.cultivar.indoor)
relatedness.out.within.wild.vs.cultivar.extra <- rbind(relatedness.out.wild,relatedness.out.cultivar.extra)
relatedness.out.within.wild.vs.cultivar.indoor <- rbind(relatedness.out.wild,relatedness.out.cultivar.indoor)
relatedness.out.within.cultivar.extra.vs.cultivar.indoor <- rbind(relatedness.out.cultivar.extra,relatedness.out.cultivar.indoor)
p.boxplot <- ggplot(relatedness.out.within, aes(x=Within,y=relatedness)) + geom_boxplot() + xlab("") + ylab("Relatedness")
p.boxplot
## permutation test
no.permutation <- 1000
permutation.test <- function(treatment, outcome, n){
distribution=c()
obs <- diff(tapply(outcome,treatment,mean))
for(i in 1:n){
distribution[i]=diff(by(outcome, sample(treatment, length(treatment), FALSE), mean))
}
result=sum(abs(distribution) >= abs(obs))/(n)
return(list(obs, result, distribution))
}
# wild vs cultivar.extra
wild.vs.cultivar.extra.permu.out <- permutation.test(relatedness.out.within.wild.vs.cultivar.extra$Within, relatedness.out.within.wild.vs.cultivar.extra$relatedness, no.permutation)
# wild vs cultivar.indoor
wild.vs.cultivar.indoor.permu.out <- permutation.test(relatedness.out.within.wild.vs.cultivar.indoor$Within, relatedness.out.within.wild.vs.cultivar.indoor$relatedness, no.permutation)
# cultivar.extra vs cultivar.indoor
cultivar.extra.vs.cultivar.indoor.permu.out <- permutation.test(relatedness.out.within.cultivar.extra.vs.cultivar.indoor$Within, relatedness.out.within.cultivar.extra.vs.cultivar.indoor$relatedness, no.permutation)
# print out P value
cat("P value: wild vs cultivar.extra\n")
print(format(wild.vs.cultivar.extra.permu.out[[2]]),digits=3)
cat("P value: wild vs cultivar.indoor\n")
print(format(wild.vs.cultivar.indoor.permu.out[[2]]),digits=3)
cat("P value: cultivar.extra vs cultivar.indoor\n")
print(format(cultivar.extra.vs.cultivar.indoor.permu.out[[2]]),digits=3)
