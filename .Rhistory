#Repeat motif of each of the 14 SSR loci
pinfreps <- c(3,2,3,2,2,2,2,3,3,3,2,2,3,2)
#Clone correction
nameko.SSR.MLG.genind <- clonecorrect(nameko.SSR.genind)
nameko.SSR.MLG.subpop.genind <- clonecorrect(nameko.SSR.subpop.genind)
# genotype accumulate curve
gac <- genotype_curve(nameko.SSR.genclone, sample = 1000, quiet = TRUE)
# Defining multilocus genotypes by genetic distance
mlg.ID.poppr <- mlg.filter(nameko.SSR.genclone, threshold = 0.05)
no.mlg.poppr <- length(unique(mlg.ID.poppr))
cat("No. Multilocus genotypes\n")
print(no.mlg.poppr)
poppr(nameko.SSR.subpop.genclone)
# Loading packages
library(stringr)
library(hierfstat)
library(adegenet)
library(poppr)
library(strataG) #for performing M-ratio
#initializing
rm(list = ls())
# Loading data set
nameko.raw <- read.csv("MLG_Pmicro_123samples.csv",header=T)
# define locus name
locus.names <- unique(str_sub(colnames(nameko.raw)[-c(1:4)],end=-2))
no.locus <- length(locus.names)
# Convert to 6-digit-numeric coded-genotype
nameko.6_digit.genotype.raw = data.frame()
nameko.6_digit.genotype.raw = data.frame(nameko.raw[,c(1:4)])
for (i in 1:no.locus){
allele.A.position = 3 + i*2
allele.B.position = 4 + i*2
target.loci = locus.names[i]
nameko.6_digit.genotype.raw = data.frame(nameko.6_digit.genotype.raw, target.loci = paste(formatC(nameko.raw[,allele.A.position],width=3, flag="0"),formatC(nameko.raw[,allele.B.position],width=3, flag="0"),sep=""))
}
colnames(nameko.6_digit.genotype.raw)[-c(1:4)] <- locus.names
#filtering out the sample "K23" because of missing alleles as expressed "NA"
nameko.6_digit.genotype  <- na.omit(nameko.6_digit.genotype.raw)
# Convert to genind
nameko.SSR.genind <- df2genind(nameko.6_digit.genotype[,-c(1:4)],ploidy=2,ncode=3,ind.name=nameko.6_digit.genotype$ID,pop=nameko.6_digit.genotype$Pop)
# Convert to genind
nameko.SSR.subpop.genind <- df2genind(nameko.6_digit.genotype[,-c(1:4)],ploidy=2,ncode=3,ind.name=nameko.6_digit.genotype$ID,pop=nameko.6_digit.genotype$Subpop)
strata(nameko.SSR.genind) <- data.frame(nameko.6_digit.genotype[,c(2:3)])
# Convert to genclone
nameko.SSR.genclone <- as.genclone(nameko.SSR.genind)
nameko.SSR.subpop.genclone <- as.genclone(nameko.SSR.subpop.genind)
#Repeat motif of each of the 14 SSR loci
pinfreps <- c(3,2,3,2,2,2,2,3,3,3,2,2,3,2)
#Clone correction
nameko.SSR.MLG.genind <- clonecorrect(nameko.SSR.genind)
nameko.SSR.MLG.subpop.genind <- clonecorrect(nameko.SSR.subpop.genind)
no.MLG.samples <- length(indNames(nameko.SSR.MLG.genind))
nameko.SSR.MLG.three.categories.genind <- nameko.SSR.MLG.genind
subpop.MLG.list <- nameko.SSR.MLG.subpop.genind@pop
MLG.ID.cultivar.sawdust <- which(subpop.MLG.list %in% "Cultivar.sawdust")
three.categories.MLG.list <- as.character(nameko.SSR.MLG.genind@pop)
three.categories.MLG.list[MLG.ID.cultivar.sawdust] <- "Cultivar.sawdust"
three.categories.MLG.list[three.categories.MLG.list=="Cultivar"] <- "Cultivar."
three.categories.factor.list <- sort(unique(three.categories.MLG.list))
three.categories.MLG.list <- factor(three.categories.MLG.list,levels=three.categories.factor.list)
nameko.SSR.MLG.three.categories.genind@pop <- three.categories.MLG.list
nameko.SSR.MLG.overall.genind <- nameko.SSR.MLG.genind
overall.MLG.list <- rep("overall",no.MLG.samples)
overall.MLG.list <- factor(overall.MLG.list)
nameko.SSR.MLG.overall.genind@pop <- overall.MLG.list
# Defining SE function
std_mean <- function(x) sd(x)/sqrt(length(x))
# Summary
summary.out <- summary(nameko.SSR.MLG.three.categories.genind)
# Number of alleles
A.out <- allele.count(nameko.SSR.MLG.three.categories.genind)
A.overall <- nAll(nameko.SSR.MLG.overall.genind,onlyObserved = TRUE)
A.cultivar.sawdust <- nAll(nameko.SSR.MLG.three.categories.genind[pop="Cultivar.sawdust"],onlyObserved = TRUE)
A.cultivar. <- nAll(nameko.SSR.MLG.three.categories.genind[pop="Cultivar."],onlyObserved = TRUE)
A.wild <- nAll(nameko.SSR.MLG.three.categories.genind[pop="Wild"],onlyObserved = TRUE)
# Percentage of polymophic loci
P.overall <- sum(A.overall > 1)/length(A.overall)
P.cultivar.sawdust <- sum(A.cultivar.sawdust > 1)/length(A.cultivar.sawdust)
P.cultivar. <- sum(A.cultivar. > 1)/length(A.cultivar.)
P.wild <- sum(A.wild > 1)/length(A.wild)
cat("P: cultivar.sawdust\n")
print(P.cultivar.sawdust)
cat("\n")
cat("P: cultivar.\n")
print(P.cultivar.)
cat("\n")
cat("P: wild\n")
print(P.wild)
cat("\n")
cat("P: overall\n")
print(P.overall)
cat("\n")
cat("Number of alleles: cultivar.sawdust\n")
print(mean(A.cultivar.sawdust))
print(std_mean(A.cultivar.sawdust))
cat("\n")
cat("Number of alleles: cultivar.\n")
print(mean(A.cultivar.))
print(std_mean(A.cultivar.log))
# Loading packages
library(stringr)
library(hierfstat)
library(adegenet)
library(poppr)
library(strataG) #for performing M-ratio
#initializing
rm(list = ls())
# Loading data set
nameko.raw <- read.csv("MLG_Pmicro_123samples.csv",header=T)
# define locus name
locus.names <- unique(str_sub(colnames(nameko.raw)[-c(1:4)],end=-2))
no.locus <- length(locus.names)
# Convert to 6-digit-numeric coded-genotype
nameko.6_digit.genotype.raw = data.frame()
nameko.6_digit.genotype.raw = data.frame(nameko.raw[,c(1:4)])
for (i in 1:no.locus){
allele.A.position = 3 + i*2
allele.B.position = 4 + i*2
target.loci = locus.names[i]
nameko.6_digit.genotype.raw = data.frame(nameko.6_digit.genotype.raw, target.loci = paste(formatC(nameko.raw[,allele.A.position],width=3, flag="0"),formatC(nameko.raw[,allele.B.position],width=3, flag="0"),sep=""))
}
colnames(nameko.6_digit.genotype.raw)[-c(1:4)] <- locus.names
#filtering out the sample "K23" because of missing alleles as expressed "NA"
nameko.6_digit.genotype  <- na.omit(nameko.6_digit.genotype.raw)
# Convert to genind
nameko.SSR.genind <- df2genind(nameko.6_digit.genotype[,-c(1:4)],ploidy=2,ncode=3,ind.name=nameko.6_digit.genotype$ID,pop=nameko.6_digit.genotype$Pop)
# Convert to genind
nameko.SSR.subpop.genind <- df2genind(nameko.6_digit.genotype[,-c(1:4)],ploidy=2,ncode=3,ind.name=nameko.6_digit.genotype$ID,pop=nameko.6_digit.genotype$Subpop)
strata(nameko.SSR.genind) <- data.frame(nameko.6_digit.genotype[,c(2:3)])
# Convert to genclone
nameko.SSR.genclone <- as.genclone(nameko.SSR.genind)
nameko.SSR.subpop.genclone <- as.genclone(nameko.SSR.subpop.genind)
#Repeat motif of each of the 14 SSR loci
pinfreps <- c(3,2,3,2,2,2,2,3,3,3,2,2,3,2)
#Clone correction
nameko.SSR.MLG.genind <- clonecorrect(nameko.SSR.genind)
nameko.SSR.MLG.subpop.genind <- clonecorrect(nameko.SSR.subpop.genind)
no.MLG.samples <- length(indNames(nameko.SSR.MLG.genind))
nameko.SSR.MLG.three.categories.genind <- nameko.SSR.MLG.genind
subpop.MLG.list <- nameko.SSR.MLG.subpop.genind@pop
MLG.ID.cultivar.sawdust <- which(subpop.MLG.list %in% "Cultivar.sawdust")
three.categories.MLG.list <- as.character(nameko.SSR.MLG.genind@pop)
three.categories.MLG.list[MLG.ID.cultivar.sawdust] <- "Cultivar.sawdust"
three.categories.MLG.list[three.categories.MLG.list=="Cultivar"] <- "Cultivar."
three.categories.factor.list <- sort(unique(three.categories.MLG.list))
three.categories.MLG.list <- factor(three.categories.MLG.list,levels=three.categories.factor.list)
nameko.SSR.MLG.three.categories.genind@pop <- three.categories.MLG.list
nameko.SSR.MLG.overall.genind <- nameko.SSR.MLG.genind
overall.MLG.list <- rep("overall",no.MLG.samples)
overall.MLG.list <- factor(overall.MLG.list)
nameko.SSR.MLG.overall.genind@pop <- overall.MLG.list
# Defining SE function
std_mean <- function(x) sd(x)/sqrt(length(x))
# Summary
summary.out <- summary(nameko.SSR.MLG.three.categories.genind)
# Number of alleles
A.out <- allele.count(nameko.SSR.MLG.three.categories.genind)
A.overall <- nAll(nameko.SSR.MLG.overall.genind,onlyObserved = TRUE)
A.cultivar.sawdust <- nAll(nameko.SSR.MLG.three.categories.genind[pop="Cultivar.sawdust"],onlyObserved = TRUE)
A.cultivar.log <- nAll(nameko.SSR.MLG.three.categories.genind[pop="Cultivar.log"],onlyObserved = TRUE)
A.wild <- nAll(nameko.SSR.MLG.three.categories.genind[pop="Wild"],onlyObserved = TRUE)
# Percentage of polymophic loci
P.overall <- sum(A.overall > 1)/length(A.overall)
P.cultivar.sawdust <- sum(A.cultivar.sawdust > 1)/length(A.cultivar.sawdust)
P.cultivar.log <- sum(A.cultivar.log > 1)/length(A.cultivar.log)
P.wild <- sum(A.wild > 1)/length(A.wild)
cat("P: cultivar.sawdust\n")
print(P.cultivar.sawdust)
cat("\n")
cat("P: cultivar.\n")
print(P.cultivar.log)
cat("\n")
cat("P: wild\n")
print(P.wild)
cat("\n")
cat("P: overall\n")
print(P.overall)
cat("\n")
cat("Number of alleles: cultivar.sawdust\n")
print(mean(A.cultivar.sawdust))
print(std_mean(A.cultivar.sawdust))
cat("\n")
cat("Number of alleles: cultivar.\n")
print(mean(A.cultivar.log))
print(std_mean(A.cultivar.log))
cat("\n")
cat("Number of alleles: wild\n")
print(mean(A.wild))
print(std_mean(A.wild))
cat("\n")
cat("Number of alleles: overall\n")
print(mean(A.overall))
print(std_mean(A.overall))
cat("\n")
# Allelic richness
AR.out <- hierfstat::allelic.richness(nameko.SSR.MLG.three.categories.genind, min.n = 10)
AR.overall.out <- hierfstat::allelic.richness(nameko.SSR.MLG.overall.genind, min.n = 10)
cat("Allelic richness: mean\n")
print(apply(AR.out$Ar,2,mean))
cat("Allelic richness: SE\n")
print(apply(AR.out$Ar,2,std_mean))
cat("\n")
cat("Allelic richness across overall: mean\n")
print(apply(AR.overall.out$Ar,2,mean)[[1]])
cat("Allelic richness across overall: SE\n")
print(apply(AR.overall.out$Ar,2,std_mean)[[1]])
cat("\n")
# Observed heterozygosity
Ho.out <- Ho(nameko.SSR.MLG.three.categories.genind)
cat("Observed heterozygosity\n")
print(Ho.out)
cat("Observed heterozygosity across overall\n")
print(Ho(nameko.SSR.MLG.overall.genind)[[1]])
cat("\n")
# Expected heterozygosity
Hs.out <- Hs(nameko.SSR.MLG.three.categories.genind)
cat("Expected heterozygosity\n")
print(Hs.out)
cat("Expected heterozygosity across overall\n")
print(Hs(nameko.SSR.MLG.overall.genind)[[1]])
cat("\n")
#Baisit diversity
basic.summary <- basic.stats(nameko.SSR.MLG.three.categories.genind)
#cat("\n")
#cat("Basic statistic across overall\n")
#print(basic.summary$overall)
# Loading packages
library(tidyverse)
library(polysat)
library(hierfstat)
library(adegenet)
library(poppr)
library(RColorBrewer)
#initializing
rm(list = ls())
# Loading data set
nameko.raw <- read.csv("MLG_Pmicro_123samples.csv",header=T)
# define locus name
locus.names <- unique(str_sub(colnames(nameko.raw)[-c(1:4)],end=-2))
no.locus <- length(locus.names)
# Convert to 6-digit-numeric coded-genotype
nameko.6_digit.genotype.raw = data.frame()
nameko.6_digit.genotype.raw = data.frame(nameko.raw[,c(1:4)])
for (i in 1:no.locus){
allele.A.position = 3 + i*2
allele.B.position = 4 + i*2
target.loci = locus.names[i]
nameko.6_digit.genotype.raw = data.frame(nameko.6_digit.genotype.raw, target.loci = paste(formatC(nameko.raw[,allele.A.position],width=3, flag="0"),formatC(nameko.raw[,allele.B.position],width=3, flag="0"),sep=""))
}
colnames(nameko.6_digit.genotype.raw)[-c(1:4)] <- locus.names
#filtering out the sample "K23" because of missing alleles as expressed "NA"
nameko.6_digit.genotype  <- na.omit(nameko.6_digit.genotype.raw)
# Convert to genind
nameko.SSR.genind <- df2genind(nameko.6_digit.genotype[,-c(1:4)],ploidy=2,ncode=3,ind.name=nameko.6_digit.genotype$ID,pop=nameko.6_digit.genotype$Pop)
# Convert to genind
nameko.SSR.subpop.genind <- df2genind(nameko.6_digit.genotype[,-c(1:4)],ploidy=2,ncode=3,ind.name=nameko.6_digit.genotype$ID,pop=nameko.6_digit.genotype$Subpop)
strata(nameko.SSR.genind) <- data.frame(nameko.6_digit.genotype[,c(2:3)])
# Convert to genclone
nameko.SSR.genclone <- as.genclone(nameko.SSR.genind)
nameko.SSR.subpop.genclone <- as.genclone(nameko.SSR.subpop.genind)
#Repeat motif of each of the 14 SSR loci
pinfreps <- c(3,2,3,2,2,2,2,3,3,3,2,2,3,2)
#Clone correction
nameko.SSR.MLG.genind <- clonecorrect(nameko.SSR.genind)
nameko.SSR.MLG.subpop.genind <- clonecorrect(nameko.SSR.subpop.genind)
# genotype accumulate curve
gac <- genotype_curve(nameko.SSR.genclone, sample = 1000, quiet = TRUE)
# Defining multilocus genotypes by genetic distance
mlg.ID.poppr <- mlg.filter(nameko.SSR.genclone, threshold = 0.05)
no.mlg.poppr <- length(unique(mlg.ID.poppr))
cat("No. Multilocus genotypes\n")
print(no.mlg.poppr)
poppr(nameko.SSR.subpop.genclone)
nameko.SSR.MLG.three.categories.genind@pop
nameko.SSR.MLG.three.categories.genind
# Loading packages
library(stringr)
library(hierfstat)
library(adegenet)
library(poppr)
library(strataG) #for performing M-ratio
#initializing
rm(list = ls())
# Loading data set
nameko.raw <- read.csv("MLG_Pmicro_123samples.csv",header=T)
# define locus name
locus.names <- unique(str_sub(colnames(nameko.raw)[-c(1:4)],end=-2))
no.locus <- length(locus.names)
# Convert to 6-digit-numeric coded-genotype
nameko.6_digit.genotype.raw = data.frame()
nameko.6_digit.genotype.raw = data.frame(nameko.raw[,c(1:4)])
for (i in 1:no.locus){
allele.A.position = 3 + i*2
allele.B.position = 4 + i*2
target.loci = locus.names[i]
nameko.6_digit.genotype.raw = data.frame(nameko.6_digit.genotype.raw, target.loci = paste(formatC(nameko.raw[,allele.A.position],width=3, flag="0"),formatC(nameko.raw[,allele.B.position],width=3, flag="0"),sep=""))
}
colnames(nameko.6_digit.genotype.raw)[-c(1:4)] <- locus.names
#filtering out the sample "K23" because of missing alleles as expressed "NA"
nameko.6_digit.genotype  <- na.omit(nameko.6_digit.genotype.raw)
# Convert to genind
nameko.SSR.genind <- df2genind(nameko.6_digit.genotype[,-c(1:4)],ploidy=2,ncode=3,ind.name=nameko.6_digit.genotype$ID,pop=nameko.6_digit.genotype$Pop)
# Convert to genind
nameko.SSR.subpop.genind <- df2genind(nameko.6_digit.genotype[,-c(1:4)],ploidy=2,ncode=3,ind.name=nameko.6_digit.genotype$ID,pop=nameko.6_digit.genotype$Subpop)
strata(nameko.SSR.genind) <- data.frame(nameko.6_digit.genotype[,c(2:3)])
# Convert to genclone
nameko.SSR.genclone <- as.genclone(nameko.SSR.genind)
nameko.SSR.subpop.genclone <- as.genclone(nameko.SSR.subpop.genind)
#Repeat motif of each of the 14 SSR loci
pinfreps <- c(3,2,3,2,2,2,2,3,3,3,2,2,3,2)
#Clone correction
nameko.SSR.MLG.genind <- clonecorrect(nameko.SSR.genind)
nameko.SSR.MLG.subpop.genind <- clonecorrect(nameko.SSR.subpop.genind)
no.MLG.samples <- length(indNames(nameko.SSR.MLG.genind))
nameko.SSR.MLG.three.categories.genind <- nameko.SSR.MLG.genind
subpop.MLG.list <- nameko.SSR.MLG.subpop.genind@pop
MLG.ID.cultivar.sawdust <- which(subpop.MLG.list %in% "Cultivar.sawdust")
three.categories.MLG.list <- as.character(nameko.SSR.MLG.genind@pop)
three.categories.MLG.list[MLG.ID.cultivar.sawdust] <- "Cultivar.sawdust"
three.categories.MLG.list[three.categories.MLG.list=="Cultivar"] <- "Cultivar."
three.categories.factor.list <- sort(unique(three.categories.MLG.list))
three.categories.MLG.list <- factor(three.categories.MLG.list,levels=three.categories.factor.list)
nameko.SSR.MLG.three.categories.genind@pop <- three.categories.MLG.list
nameko.SSR.MLG.overall.genind <- nameko.SSR.MLG.genind
overall.MLG.list <- rep("overall",no.MLG.samples)
overall.MLG.list <- factor(overall.MLG.list)
nameko.SSR.MLG.overall.genind@pop <- overall.MLG.list
# Defining SE function
std_mean <- function(x) sd(x)/sqrt(length(x))
# Summary
summary.out <- summary(nameko.SSR.MLG.three.categories.genind)
# Number of alleles
A.out <- allele.count(nameko.SSR.MLG.three.categories.genind)
A.overall <- nAll(nameko.SSR.MLG.overall.genind,onlyObserved = TRUE)
A.cultivar.sawdust <- nAll(nameko.SSR.MLG.three.categories.genind[pop="Cultivar.sawdust"],onlyObserved = TRUE)
A.cultivar.log <- nAll(nameko.SSR.MLG.three.categories.genind[pop="Cultivar.log"],onlyObserved = TRUE)
A.wild <- nAll(nameko.SSR.MLG.three.categories.genind[pop="Wild"],onlyObserved = TRUE)
# Percentage of polymophic loci
P.overall <- sum(A.overall > 1)/length(A.overall)
P.cultivar.sawdust <- sum(A.cultivar.sawdust > 1)/length(A.cultivar.sawdust)
P.cultivar.log <- sum(A.cultivar.log > 1)/length(A.cultivar.log)
P.wild <- sum(A.wild > 1)/length(A.wild)
cat("P: cultivar.sawdust\n")
print(P.cultivar.sawdust)
cat("\n")
cat("P: cultivar.log\n")
print(P.cultivar.log)
cat("\n")
cat("P: wild\n")
print(P.wild)
cat("\n")
cat("P: overall\n")
print(P.overall)
cat("\n")
cat("Number of alleles: cultivar.sawdust\n")
print(mean(A.cultivar.sawdust))
print(std_mean(A.cultivar.sawdust))
cat("\n")
cat("Number of alleles: cultivar.\n")
print(mean(A.cultivar.log))
print(std_mean(A.cultivar.log))
cat("\n")
cat("Number of alleles: wild\n")
print(mean(A.wild))
print(std_mean(A.wild))
cat("\n")
cat("Number of alleles: overall\n")
print(mean(A.overall))
print(std_mean(A.overall))
cat("\n")
# Allelic richness
AR.out <- hierfstat::allelic.richness(nameko.SSR.MLG.three.categories.genind, min.n = 10)
AR.overall.out <- hierfstat::allelic.richness(nameko.SSR.MLG.overall.genind, min.n = 10)
cat("Allelic richness: mean\n")
print(apply(AR.out$Ar,2,mean))
cat("Allelic richness: SE\n")
print(apply(AR.out$Ar,2,std_mean))
cat("\n")
cat("Allelic richness across overall: mean\n")
print(apply(AR.overall.out$Ar,2,mean)[[1]])
cat("Allelic richness across overall: SE\n")
print(apply(AR.overall.out$Ar,2,std_mean)[[1]])
cat("\n")
# Observed heterozygosity
Ho.out <- Ho(nameko.SSR.MLG.three.categories.genind)
cat("Observed heterozygosity\n")
print(Ho.out)
cat("Observed heterozygosity across overall\n")
print(Ho(nameko.SSR.MLG.overall.genind)[[1]])
cat("\n")
# Expected heterozygosity
Hs.out <- Hs(nameko.SSR.MLG.three.categories.genind)
cat("Expected heterozygosity\n")
print(Hs.out)
cat("Expected heterozygosity across overall\n")
print(Hs(nameko.SSR.MLG.overall.genind)[[1]])
cat("\n")
#Baisit diversity
basic.summary <- basic.stats(nameko.SSR.MLG.three.categories.genind)
#cat("\n")
#cat("Basic statistic across overall\n")
#print(basic.summary$overall)
nameko.SSR.MLG.three.categories.genind
nameko.SSR.MLG.three.categories.genind@pop
summary(nameko.SSR.MLG.three.categories.genind@pop)
library(related) #Pew et al (2015) Mol Ecol Res | https://doi.org/10.1111/1755-0998.12323
library(ggplot2)
library(adegenet) #handling of genind object
library(poppr) #handling of genclone object
library(stringr)
rm(list = ls())
# Loading data set
nameko.raw <- read.csv("MLG_Pmicro_123samples.csv",header=T)
# define locus name
locus.names <- unique(str_sub(colnames(nameko.raw)[-c(1:4)],end=-2))
no.locus <- length(locus.names)
# Convert to 6-digit-numeric coded-genotype
nameko.6_digit.genotype.raw = data.frame()
nameko.6_digit.genotype.raw = data.frame(nameko.raw[,c(1:4)])
for (i in 1:no.locus){
allele.A.position = 3 + i*2
allele.B.position = 4 + i*2
target.loci = locus.names[i]
nameko.6_digit.genotype.raw = data.frame(nameko.6_digit.genotype.raw, target.loci = paste(formatC(nameko.raw[,allele.A.position],width=3, flag="0"),formatC(nameko.raw[,allele.B.position],width=3, flag="0"),sep=""))
}
colnames(nameko.6_digit.genotype.raw)[-c(1:4)] <- locus.names
#filtering out the sample "K23" because of missing alleles as expressed "NA"
nameko.6_digit.genotype  <- na.omit(nameko.6_digit.genotype.raw)
# Convert to genind object
nameko.SSR.genind <- df2genind(nameko.6_digit.genotype[,-c(1:4)],ploidy=2,ncode=3,ind.name=nameko.6_digit.genotype$ID,pop=nameko.6_digit.genotype$Pop)
strata(nameko.SSR.genind) <- data.frame(nameko.6_digit.genotype[,c(2:3)])
# Convert to genclone object
nameko.SSR.genclone <- as.genclone(nameko.SSR.genind)
# Clone correction
nameko.SSR.MLG.genind <- clonecorrect(nameko.SSR.genind)
nameko.genotype.MLG <- genind2df(nameko.SSR.MLG.genind, usepop = FALSE, oneColPerAll = TRUE)
nameko.genotype.MLG <- data.frame(ID=rownames(nameko.genotype.MLG),nameko.genotype.MLG)
MLG.ID.No.wild <- which(nameko.SSR.MLG.genind@strata$Pop=="Wild")
MLG.ID.No.cultivar <- which(nameko.SSR.MLG.genind@strata$Pop=="Cultivar")
MLG.ID.No.cultivar.sawdust <- which(nameko.SSR.MLG.genind@strata$Subpop=="Cultivar.sawdust")
MLG.ID.No.cultivar.others <- setdiff(MLG.ID.No.cultivar, MLG.ID.No.cultivar.sawdust)
nameko.genotype.MLG.wild <- nameko.genotype.MLG[MLG.ID.No.wild,]
nameko.genotype.MLG.cultivar <- nameko.genotype.MLG[MLG.ID.No.cultivar,]
nameko.genotype.MLG.cultivar.sawdust <- nameko.genotype.MLG[MLG.ID.No.cultivar.sawdust,]
nameko.genotype.MLG.cultivar.others <- nameko.genotype.MLG[MLG.ID.No.cultivar.others,]
MLG.ID.wild <- nameko.genotype.MLG.wild$ID
MLG.ID.cultivar <- nameko.genotype.MLG.cultivar$ID
MLG.ID.cultivar.sawdust <- nameko.genotype.MLG.cultivar.sawdust$ID
MLG.ID.cultivar.others <- setdiff(MLG.ID.cultivar, MLG.ID.cultivar.sawdust)
# write out text file to apply the pakacates "related"
write.table(nameko.genotype.MLG, "nameko.MLG.txt", quote=F,row.names=F,col.names=F, append=F)
## Load the data file from the above text file.
nameko.Genotype <- readgenotypedata("nameko.MLG.txt")
## Run coancestry function in the packages "related"
related.run.output <- coancestry(nameko.Genotype$gdata, dyadml=1, trioml=1, lynchli=1, lynchrd=1, quellergt=1, ritland =1, wang=1)
compareestimators(nameko.Genotype, 100)
sim <- familysim(nameko.Genotype$freqs, 100)
output <- coancestry(sim, quellergt=1)
simrel <- cleanuprvals(output$relatedness, 100)
relvalues <- simrel[, 10]
#label
label1 <- rep("PO", 100)
label2 <- rep("Full", 100)
label3 <- rep("Half", 100)
label4 <- rep("Unrelated", 100)
labels <- c(label1, label2, label3, label4)
Relationship <- labels
newdata <- as.data.frame(cbind(Relationship, relvalues))
newdata$relvalues <- as.numeric(as.character(newdata$relvalues))
qplot(relvalues, ..density.., data=newdata, geom="density", colour=as.factor(Relationship), xlab="Relatedness Value", ylab="Density")
relatedness.out <- data.frame(ind1.id=related.run.output$related$ind1.id, ind2.id=related.run.output$related$ind2.id, relatedness=related.run.output$related$quellergt)
relatedness.out.wild <- subset(relatedness.out,ind1.id %in% MLG.ID.wild & ind2.id %in% MLG.ID.wild)
no.wild.pair <- nrow(relatedness.out.wild)
relatedness.out.wild <- data.frame(relatedness.out.wild, Within=rep("Wild",no.wild.pair))
relatedness.out.cultivar <- subset(relatedness.out,ind1.id %in% MLG.ID.cultivar & ind2.id %in% MLG.ID.cultivar)
no.cultivar.pair <- nrow(relatedness.out.cultivar)
relatedness.out.cultivar <- data.frame(relatedness.out.cultivar, Within=rep("Cultivar",no.cultivar.pair))
relatedness.out.cultivar.sawdust <- subset(relatedness.out,ind1.id %in% MLG.ID.cultivar.sawdust & ind2.id %in% MLG.ID.cultivar.sawdust)
no.cultivar.sawdust.pair <- nrow(relatedness.out.cultivar.sawdust)
relatedness.out.cultivar.sawdust <- data.frame(relatedness.out.cultivar.sawdust, Within=rep("Cultivar.sawdust",no.cultivar.sawdust.pair))
relatedness.out.cultivar.others <- subset(relatedness.out,ind1.id %in% MLG.ID.cultivar.others & ind2.id %in% MLG.ID.cultivar.others)
no.cultivar.others.pair <- nrow(relatedness.out.cultivar.others)
relatedness.out.cultivar.others <- data.frame(relatedness.out.cultivar.others, Within=rep("Cultivar.others",no.cultivar.others.pair))
relatedness.out.within <- rbind(relatedness.out.wild,relatedness.out.cultivar.sawdust,relatedness.out.cultivar.others)
relatedness.out.within.wild.vs.cultivar.others <- rbind(relatedness.out.wild,relatedness.out.cultivar.others)
relatedness.out.within.wild.vs.cultivar.sawdust <- rbind(relatedness.out.wild,relatedness.out.cultivar.sawdust)
relatedness.out.within.cultivar.others.vs.cultivar.sawdust <- rbind(relatedness.out.cultivar.others,relatedness.out.cultivar.sawdust)
p.boxplot <- ggplot(relatedness.out.within, aes(x=Within,y=relatedness)) + geom_boxplot() + xlab("") + ylab("Relatedness")
p.boxplot
relatedness.out.wild
head(relatedness.out.wild)
print(mean(relatedness.out.wild$relatedness))
cat("relatedness within wild: mean, SD\n")
print(mean(relatedness.out.wild$relatedness))
print(sd(relatedness.out.wild$relatedness))
cat("relatedness within cultivar.sawdust: mean, SD\n")
print(mean(relatedness.out.cultivar.sawdust$relatedness))
print(sd(relatedness.out.cultivar.sawdust$relatedness))
cat("relatedness within cultivar.others: mean, SD\n")
print(mean(relatedness.out.cultivar.others$relatedness))
print(sd(relatedness.out.cultivar.others$relatedness))
p.boxplot
relatedness.out
head(relatedness.out)
subset(relatedness.out,ind1.id %in% "Tohoku-N127" & ind2.id %in% "Fukushima-N1")
subset(relatedness.out,ind1.id %in% "Tohoku-N127" & ind2.id %in% "Fukushima-N2")
relatedness.out.N127.N2 <- subset(relatedness.out,ind1.id %in% "Tohoku-N127" & ind2.id %in% "Fukushima-N2")
relatedness.out.N127.N2 <- subset(relatedness.out,ind1.id %in% "Tohoku-N127" & ind2.id %in% "Fukushima-N2")
cat("relatedness between N127 and Fukushima-N2n")
print(relatedness.out.N127.N2$relatedness)
cat("relatedness between N127 and Fukushima-N2\n")
print(relatedness.out.N127.N2$relatedness)
